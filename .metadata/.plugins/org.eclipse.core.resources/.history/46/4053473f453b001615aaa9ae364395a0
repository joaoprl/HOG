
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Hog {
	private BufferedImage image = null;
	
    public Hog(String file){
      BufferedImage colorImage = null;
      try {
        colorImage = ImageIO.read(new File(file));
      } catch (IOException e) {
      }
      ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);  
      ColorConvertOp op = new ColorConvertOp(cs, null);  
      image = op.filter(colorImage, null);
      
  }
  public void getHistograms(){
	  for(int y = 0; y < image.getHeight(); y++){
		  for(int x = 0; x < image.getWidth(); x++){
			  double x_vec, y_vec;
		  
			  if (x == 0 || x == image.getWidth() - 1 || y == 0 || y == image.getHeight() - 1){
	                x_vec = 0;
	                y_vec = 0;
			  }
	                
	            else{
	                x_vec = getValue(x + 1, y) - getValue(x - 1, y);
	                y_vec = getValue(x, y + 1) - getValue(x, y - 1);
	            }
	            double v = Math.pow(x_vec, 2) + Math.pow(y_vec, 2);
	            mag = pow( v, 0.5)
	            ang = math.atan2(y_vec, x_vec)

	            angRad = math.degrees(ang)

	            histogram = histograms.get((x//8, y//8), 9 * [0])
	            pos1 = ((x + 10) // 20 - 1) % 9
	            pos2 = ((x + 10) // 20) % 9

	            histogram[pos1] += ((20 - ((x % 10.0) % 20)) / 20) * mag
	            histogram[pos2] += (1 - (20 - ((x % 10.0) % 20)) / 20) * mag

	            histograms.update({(x//8, y//8) : histogram})

	    return histograms

		  }
	  }
	  
  }
  
  private int getValue(int x, int y){
	  return image.getRGB(x, y) & 0xFF;
  }
  

}
