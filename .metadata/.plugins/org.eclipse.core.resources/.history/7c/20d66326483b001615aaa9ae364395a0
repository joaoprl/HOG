
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Hog {
	private BufferedImage image = null;

	public Hog(String file){
		BufferedImage colorImage = null;
		try {
			colorImage = ImageIO.read(new File(file));
		} catch (IOException e) {
		}
		ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);  
		ColorConvertOp op = new ColorConvertOp(cs, null);  
		image = op.filter(colorImage, null);

	}
	public double[][][] getHistograms(){

		double [][][] histograms = new double[image.getWidth()][image.getHeight()][9];

		for(int y = 0; y < image.getHeight(); y++){
			for(int x = 0; x < image.getWidth(); x++){
				double x_vec, y_vec;

				if (x == 0 || x == image.getWidth() - 1 || y == 0 || y == image.getHeight() - 1){
					x_vec = 0;
					y_vec = 0;
				}

				else{
					x_vec = getValue(x + 1, y) - getValue(x - 1, y);
					y_vec = getValue(x, y + 1) - getValue(x, y - 1);
				}
				double v = Math.pow(x_vec, 2) + Math.pow(y_vec, 2);
				double mag = Math.pow( v, 0.5);
				double ang = Math.atan2(Math.abs(y_vec), Math.abs(x_vec));

				double angRad = Math.toDegrees(ang);

				int pos1 = (int)((angRad + 10) / 20 - 1) % 9;
				int pos2 = (int)((angRad + 10) / 20) % 9;
				
				histograms[x][y][pos1] += ((20 - ((angRad % 10.0) % 20)) / 20) * mag;
				histograms[x][y][pos2] += (1 - (20 - ((angRad % 10.0) % 20)) / 20) * mag;

			}
		}
		for(int y = 0; y < image.getHeight(); y++){
			for(int x = 0; x < image.getWidth(); x++){
				for(int z = 0; z < 9; z++)
					if(histograms[x][y][z] > 5)
						System.out.print(histograms[x][y][z] + " ");
		return histograms;
	}

	private int getValue(int x, int y){
		return image.getRGB(x, y) & 0xFF;
	}

}
